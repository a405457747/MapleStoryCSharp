//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityEngine.SceneManagement;

namespace CallPalCatGames.QFrameworkExtension
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using QFramework;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    using DG.Tweening;
    using UniRx;

    public class LoadingPanelData : QFramework.UIPanelData
    {
        public string NextSceneName { get; set; }
    }

    public partial class LoadingPanel : QFramework.UIPanel
    {
        private AsyncOperation _async;
        private IntReactiveProperty _barProgress;
        private int _theProgress;

        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            throw new System.NotImplementedException();
        }

        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as LoadingPanelData ?? new LoadingPanelData();
            // please add init code here
            _barProgress = new IntReactiveProperty(0);
            _barProgress.Subscribe(_ =>
                {
                    if (_ <= 100)
                    {
                        LabelSCommonText.text = $"{_}%";
                        Slider.value = _barProgress.Value / 100f;
                    }
                })
                .AddTo(this);
            StartCoroutine(LoadScene());
            SendMsg(new VoiceSwitchQMsg(false, (int)VoiceEvent.MusicSwitch));
            SendMsg(new SetPanelColorQMsg(this, PanelColorType.Normal));
        }

        protected override void OnOpen(QFramework.IUIData uiData)
        {
        }

        protected override void OnShow()
        {
        }

        protected override void OnHide()
        {
        }

        protected override void OnClose()
        {
            SendMsg(new VoiceSwitchQMsg(true, (int)VoiceEvent.MusicSwitch));
        }
        
        private void Update()
        {
            if (_async == null) return;
            if (_async.progress < 0.9f)
            {
                _theProgress = (int)_async.progress * 100;
            }
            else
            {
                _theProgress = 100;
            }
            if (_barProgress.Value < _theProgress)
            {
                _barProgress.Value += 4;
            }
            if (_barProgress.Value == 100)
            {
                _barProgress.Value = 101;
                //if (async.isDone)
                //{
                _async.allowSceneActivation = true;
                UIMgr.OpenPanel<PurdahPanel>(UILevel.Forward, null, null, nameof(PurdahPanel));
                Tool.ClearMemory();
                //}
            }
        }
        
        private IEnumerator LoadScene()
        {
            _async = SceneManager.LoadSceneAsync(mData.NextSceneName);
            _async.allowSceneActivation = false;
            yield return _async;
        }
    }
}